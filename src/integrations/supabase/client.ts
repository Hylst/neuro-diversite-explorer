
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Utilisation des variables d'environnement pour les clés Supabase
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://gypgbizaguqikiourxcx.supabase.co";
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd5cGdiaXphZ3VxaWtpb3VyeGN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxMjEzMDEsImV4cCI6MjA1ODY5NzMwMX0.JJY65xGv6mt7Fcgv_mKEsItls_d0v_vOi_UvGF6gkIc";

// Vérification en développement pour s'assurer que les variables d'environnement sont définies
if (import.meta.env.DEV) {
  if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
    console.warn("Les variables d'environnement Supabase ne sont pas définies. Utilisez un fichier .env.local pour les définir.");
  }
}

// Déterminer l'URL actuelle
const SITE_URL = window.location.origin;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_ANON_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce',
      // The redirectTo property needs to be properly configured in the signUp and signIn methods
      // rather than in the client initialization
    }
  }
);

// Console log pour débogage
console.log("Supabase client initialized with site URL:", SITE_URL);

// Fonction pour initialiser les buckets de stockage nécessaires
export const initializeSupabaseStorage = async () => {
  try {
    // Vérifier si le bucket 'avatars' existe
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error("Erreur lors de la vérification des buckets:", error);
      return;
    }
    
    const avatarBucketExists = buckets.some(bucket => bucket.name === 'avatars');
    
    // Créer le bucket 'avatars' s'il n'existe pas
    if (!avatarBucketExists) {
      console.log("Création du bucket 'avatars'...");
      const { error: createError } = await supabase.storage.createBucket('avatars', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 2, // 2MB
        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif']
      });
      
      if (createError) {
        console.error("Erreur lors de la création du bucket 'avatars':", createError);
      } else {
        console.log("Bucket 'avatars' créé avec succès");
      }
    } else {
      console.log("Le bucket 'avatars' existe déjà");
    }
  } catch (err) {
    console.error("Erreur lors de l'initialisation du stockage:", err);
  }
};

// Initialiser le stockage au démarrage de l'application
initializeSupabaseStorage();
